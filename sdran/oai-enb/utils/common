#!/bin/bash
################################################################################
#
# Copyright (c) 2016, EURECOM (www.eurecom.fr)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the FreeBSD Project.
#
################################################################################
# file common
# brief common functions and variables
# author  navid.nikaein@eurecom.fr and A. B. Molini

#oai-enb-version="2.0"
ubuntu_dist=$(lsb_release -si)$(lsb_release -sr)

set_env_paths(){

#paths in openairinterface-5G on Git

openair_path=/srv/openair5G
build_path=$openair_path/cmake_targets
tools_path=$build_path/tools
conf_path=$openair_path/targets/PROJECTS/GENERIC-LTE-EPC/CONF
exec_path=$openair_path/targets/bin
oaieNB_exec_name=lte-softmodem.Rel14

 
config_file_sodera_path=/srv/openair5G/targets/ARCH/LMSSDR
config_file_sodera_default=enb_sodera_highband_5MHz_rx19dB_txfull.ini
config_file_sodera_5mhz_hb=enb_sodera_highband_5MHz_rx19dB_txfull.ini
config_file_sodera_10mhz_hb=enb_sodera_highband_10MHz_rx19dB_txfull.ini
config_file_sodera_5mhz_lb=enb_sodera_lowband_Lrx_5MHz_rx19dB_txfull.ini
config_file_sodera_10mhz_lb=enb_sodera_lowband_Lrx_10MHz_rx19dB_txfull.ini
config_file_sodera_5mhz_wb=enb_sodera_lowband_Wrx_5MHz_rx19dB_txfull.ini
config_file_sodera_10mhz_wb=enb_sodera_lowband_Wrx_10MHz_rx19dB_txfull.ini

}

get_series(){
local series=$(lsb_release -sc)
if [ -n "$series" ] ; then
    echo $series
else
    echo "unknown"
fi
}
get_kernel_name(){
local series=$(get_series)
case "$series" in
    "trusty") echo "vivid" ; return ;;
    "xenial") echo "xenial" ; return  ;;
    "yakkety") echo "yakkety" ; return ;;
    "zesty") echo "" ; return ;;
esac
echo "vivid"
}
get_kernel_version(){
local series=$(get_series)
case "$series" in
    "trusty") echo "3.19" ; return ;;
    "xenial") echo "4.4.14"  ; return ;;
    "yakkety") echo "4.5.7" ; return ;;
    "zesty") echo "4.8.17"   ; return ;;
esac
echo  "4.4.14"
}

install_required_kernel(){
version=$(get_kernel_version)
name=$(get_kernel_name)
if [ "$(cat $CHARM_DIR/.kernel)" == "lowlatency" ]; then 
    wget -r -e robots=off --accept-regex "(.*lowlatency.*amd64)|(all).deb" http://kernel.ubuntu.com/~kernel-ppa/mainline/v${version}-${name}/
else
    wget -r -e robots=off --accept-regex "(.*generic.*amd64)|(all).deb" http://kernel.ubuntu.com/~kernel-ppa/mainline/v${version}-${name}/
fi 
dpkg -i kernel.ubuntu.com/*/*/*/*deb
}

check_current_kernel(){

required_kern_version=$(get_kernel_version)
required_kern_major=`echo $required_kern_version | cut -d '.' -f1`
required_kern_minor=`echo $required_kern_version | cut -d '.' -f2`
current_kern_release=`uname -r`
current_kern_major=`echo $current_kern_release | cut -d '.' -f1`
current_kern_minor=`echo $current_kern_release | cut -d '.' -f2`

if [[ "$current_kern_release" =~ .*lowlatency.* ]]; then
    LOWLATENCY_KERNEL_IS_INSTALLED="true"
else 
    LOWLATENCY_KERNEL_IS_INSTALLED="false"
fi 

if [ $current_kern_major -ge $required_kern_major ]; then
     REQUIRED_KERNEL_IS_INSTALLED="true"
elif [ $current_kern_major -eq $required_kern_major ] && [ $current_kern_minor -ge $required_kern_minor ]; then
    REQUIRED_KERNEL_IS_INSTALLED="true"
else
     REQUIRED_KERNEL_IS_INSTALLED="false"
fi

}

check_enb_process(){
	
#IS_RUNNING=`systemctl status enb.service`
#if [[ $IS_RUNNING =~ .*running.* ]]; then
#fi
    if [[ $ubuntu_dist == *"14"* ]]; then 
	IS_ACTIVE=`service oaieNB status`
    else
	IS_ACTIVE=`systemctl is-active enb.service`
    fi 


    if [ "$IS_ACTIVE" == "active" ]; then
	juju-log "OAI eNB is running"
	status=0
    elif [[ $IS_ACTIVE =~ .*running.* ]]; then
	juju-log "OAI HSS is running"
	status=0
    else
	juju-log "OAI eNB is not running" 
	status=1
    fi

}
start_enb(){

if [[ $ubuntu_dist == *"14"* ]]; then 
    service oaieNB restart || service oaieNB start || true
else
    systemctl restart enb.service || true 
fi 

}

stop_enb(){

    if [[ $ubuntu_dist == *"14"* ]]; then 
	service oaieNB stop || true
    else
	systemctl stop enb.service  || true 
    fi 

}
start_enb_process(){

    start_enb
    check_enb_process || true
    if [ $status -eq 1 ]; then
       juju-log "Trouble with OAI ENB upstart file...try to upgrade the charm"
       status-set blocked "Trouble with OAI ENB upstart file...try to upgrade the charm"
       exit 1
    else
	juju-log "Running OAI ENB"
	status-set active "OAI ENB is running"
    fi 
}



add_mme_ip(){

    set_env_paths
    file_config=`cat $CHARM_DIR/.config_file`

sed -r -n "1,/MME parameters/ p" $conf_path/$file_config > $CHARM_DIR/beginning

if [ ! -f $CHARM_DIR/mme_ips ]; then

cat <<EOF > $CHARM_DIR/mme_ips
    mme_ip_address      = (  
                              { ipv4       = "$1";
                                ipv6       = "192:168:30::17";
                                active     = "yes";
                                preference = "ipv4"; }
                          );
EOF
else

cat <<EOF > /tmp/temp
                             ,{ ipv4       = "$1";
                                ipv6       = "192:168:30::17";
                                active     = "yes";
                                preference = "ipv4"; }
EOF

sed -r -i "/preference/r /tmp/temp" $CHARM_DIR/mme_ips

fi

cat $CHARM_DIR/beginning > $CHARM_DIR/enb.conf
cat $CHARM_DIR/mme_ips >> $CHARM_DIR/enb.conf
sed -r -n "/NETWORK_INTERFACES/,$ p" $conf_path/$file_config >> $CHARM_DIR/enb.conf

mv -f $CHARM_DIR/enb.conf $conf_path/$file_config
rm -f $CHARM_DIR/beginning

}

remove_mme_ip(){
    set_env_paths
    file_config=`cat $CHARM_DIR/.config_file`
    sed -r -i "/$1/,/preference/ d" $conf_path/$file_config
    sed -r -i "0,/ipv4[ \t]*=[ \t]*\"[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\";/ s/,(\{[ \t]*ipv4[ \t]*=[ \t]*\"[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\")/ \1/" $conf_path/$file_config
    
    #if there are no other  relations we can rmeove the file with
    #the list of all the ip mme addresses
    
    sed -r -i "/$1/,/preference/ d" $CHARM_DIR/mme_ips
    sed -r -i "0,/ipv4[ \t]*=[ \t]*\"[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\";/ s/,(\{[ \t]*ipv4[ \t]*=[ \t]*\"[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\")/ \1/" $CHARM_DIR/mme_ips
    
    if [ -z "$(grep "ipv4" $CHARM_DIR/mme_ips)" ]; then
	rm $CHARM_DIR/mme_ips
    fi

}

add_rtc_ip(){

    set_env_paths
    file_config=`cat $CHARM_DIR/.config_file`

    sed -r -n "1,/Physical parameters/ p" $conf_path/$file_config > $CHARM_DIR/beginning

    if [ ! -f $CHARM_DIR/rtc_ip ]; then

	cat <<EOF > $CHARM_DIR/rtc_ip
    NETWORK_CONTROLLER :
    {
        FLEXRAN_AGENT_INTERFACE_NAME            = "$1";
        FLEXRAN_AGENT_IPV4_ADDRESS              = "$2/30";
        FLEXRAN_AGENT_PORT                      = $3;
        FLEXRAN_AGENT_CACHE                     = "/mnt/oai_agent_cache";
    };

EOF
	
	cat $CHARM_DIR/beginning > $CHARM_DIR/enb_rtc.conf
	cat $CHARM_DIR/rtc_ip >> $CHARM_DIR/enb_rtc.conf
	sed -r -n "/component_carriers/,$ p" $conf_path/$file_config >> $CHARM_DIR/enb_rtc.conf
	
	mv -f $CHARM_DIR/enb_rtc.conf $conf_path/$file_config
	rm -f $CHARM_DIR/beginning
    else
	
	sed -r -i "/FLEXRAN_AGENT_INTERFACE_NAME/ s/\".+\"/\"$1\"/" $conf_path/$config_file 
	sed -r -i "/FLEXRAN_AGENT_IPV4_ADDRESS/ s/\".+\"/\"$2\"/" $conf_path/$config_file 
	sed -r -i "/FLEXRAN_AGENT_PORT/ s/\".+\"/\$3/" $conf_path/$config_file 
	
    fi    
}

# get from http://www.linuxjournal.com/content/validating-ip-address-bash-script
validate_ip() {

local  ip=$1
local  stat=1

if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
    OIFS=$IFS
    IFS='.'
    ip=($ip)
    IFS=$OIFS
    [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
        && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
    stat=$?
fi
return $stat
}

get_ip_address(){

local  ip=$1
local  status=1
local  status_after=1

#if ! validate_ip $ip; then
#    ip=`host $ip | awk '{ print $4 }'`
#fi

validate_ip $ip
status=$?
if [ "$status" == "1" ] ; then
    echo "doing nslookup for the eNB host name $ip"
    juju-log "perfroming nslookup for the eNB host name ($ip)"
    validated_public_ip=$(nslookup $ip | awk ' FNR == 5 {print $2 }')
    status_after=$(validate_ip $ip)
    if [ "$status_after" == 1 ] ; then
        echo "nslookup failed for the eNB host name $ip"
        juju-log "nslookup failed for the eNB host name ($ip)"
        return $status_after
    else
        echo "eNB ip address is $validated_public_ip"
        return 0
    fi
else
    validated_public_ip=$ip
    echo "eNB ip address is $validated_public_ip"
    return 0
fi
}

check_ifup(){
    if [[ ! -d /sys/class/net/${1} ]]; then
	juju-log "$1 interface not found"
        return 1
    elif [[ $(</sys/class/net/${1}/operstate) == up ]]; then 
	return 0
    else	
	return 1
    fi
}
